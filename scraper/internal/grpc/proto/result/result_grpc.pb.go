// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: result.proto

package result

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResultListenerClient is the client API for ResultListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultListenerClient interface {
	Listen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ResultListener_ListenClient, error)
}

type resultListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewResultListenerClient(cc grpc.ClientConnInterface) ResultListenerClient {
	return &resultListenerClient{cc}
}

func (c *resultListenerClient) Listen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ResultListener_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResultListener_ServiceDesc.Streams[0], "/result.ResultListener/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &resultListenerListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResultListener_ListenClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type resultListenerListenClient struct {
	grpc.ClientStream
}

func (x *resultListenerListenClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResultListenerServer is the server API for ResultListener service.
// All implementations must embed UnimplementedResultListenerServer
// for forward compatibility
type ResultListenerServer interface {
	Listen(*emptypb.Empty, ResultListener_ListenServer) error
	mustEmbedUnimplementedResultListenerServer()
}

// UnimplementedResultListenerServer must be embedded to have forward compatible implementations.
type UnimplementedResultListenerServer struct {
}

func (UnimplementedResultListenerServer) Listen(*emptypb.Empty, ResultListener_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedResultListenerServer) mustEmbedUnimplementedResultListenerServer() {}

// UnsafeResultListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResultListenerServer will
// result in compilation errors.
type UnsafeResultListenerServer interface {
	mustEmbedUnimplementedResultListenerServer()
}

func RegisterResultListenerServer(s grpc.ServiceRegistrar, srv ResultListenerServer) {
	s.RegisterService(&ResultListener_ServiceDesc, srv)
}

func _ResultListener_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResultListenerServer).Listen(m, &resultListenerListenServer{stream})
}

type ResultListener_ListenServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type resultListenerListenServer struct {
	grpc.ServerStream
}

func (x *resultListenerListenServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

// ResultListener_ServiceDesc is the grpc.ServiceDesc for ResultListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResultListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "result.ResultListener",
	HandlerType: (*ResultListenerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _ResultListener_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "result.proto",
}
